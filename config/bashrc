
###############################
# Environment
###############################

export ANDROID_HOME=$HOME/Android/Sdk
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/Projects/dotfiles/bin"
# export PATH="$PATH:$ANDROID_HOME/Sdk/platform-tools"
export PAGER=less  		

if [ "$(hostname)" = "Veteran" ]; then
  export HOST_CONFIG_FILE=$HOME/Projects/dotfiles/nixos/host-veteran.nix
elif [ "$(hostname)" = "Spectre" ]; then
  export HOST_CONFIG_FILE=$HOME/Projects/dotfiles/nixos/host-spectre.nix
else
  export HOST_CONFIG_FILE=
fi

###############################
# Commands - Hardware
###############################

#
# Day/Night Theme
#

alias ctn='redshift -O 4500'	# make them only one alias that swaps modes
alias ctd='redshift -x'       # also figure out better alias name?

#
# Monitor selection
#

function xr() {
  if [ "$(hostname)" = "Veteran" ]; then
    BUILD_IN_MONITOR="LVDS-1"
    EXTERNAL_MONITOR="VGA-1"
  else
    BUILD_IN_MONITOR="eDP-1"
    EXTERNAL_MONITOR="HDMI-1"
  fi

  if [ "$1" = "" ]; then
    xrandr --output $EXTERNAL_MONITOR --off --output $BUILD_IN_MONITOR --primary --auto
  elif [ "$1" = "1" ]; then
    xrandr --output $BUILD_IN_MONITOR --off --output $EXTERNAL_MONITOR --primary --auto
  elif [ "$1" = "l" ]; then
    xrandr --output $BUILD_IN_MONITOR --auto --output $EXTERNAL_MONITOR --auto --primary --left-of $BUILD_IN_MONITOR
  elif [ "$1" = "r" ]; then
    xrandr --output $BUILD_IN_MONITOR --auto --output $EXTERNAL_MONITOR --auto --primary --right-of $BUILD_IN_MONITOR
  else
    echo "unknown extra argument: $1 (known: 1, l, r)"
  fi
}

#
# Other utils (devices and network testing, mouse, bluetooth)
#

alias network_speed_test='fast -u --single-line'
alias reset_mouse='sudo modprobe -r psmouse && sudo modprobe psmouse'
alias wifi='nmcli device wifi'
alias wifi-salon='sudo nmcli device wifi connect TP-LINK_9D08'
alias wifi-dom='sudo nmcli device wifi connect TP-Link_14C0'
alias wifi-pokoj='sudo nmcli device wifi connect Robert\ Hotspot'
alias wifi-phone='sudo nmcli device wifi connect Galaxy\ A70D79E'

###############################
# Commands - Configuration
###############################

#
# Aliases management
#

alias a='alias'
alias au='unalias'
function af() { alias | grep "$1"; }

#
# Config files editing and reloading
#

alias c='$EDITOR $HOME/.bashrc'
alias cr="exec bash"  # zsh version has -l
alias hc='$EDITOR $HOST_CONFIG_FILE'
alias hcs='$EDITOR $HOME/Projects/dotfiles/nixos/host-shared.nix'
function hcr() {
  if [ "$(hostname)" == "Veteran" ]; then
    sudo nixos-rebuild -I nixos-config=$HOME/Projects/dotfiles/nixos/host-veteran.nix switch
  else
    sudo nixos-rebuild -I nixos-config=$HOME/Projects/dotfiles/nixos/host-spectre.nix switch
  fi
}

###############################
# Commands - Programs
###############################

# Use default
alias o='xdg-open'

# zellij
alias zl='zellij list-sessions'
function zm() {
  zellij attach main options --disable-mouse-mode
  if [ "$?" -eq 1 ]; then
    zellij -s main options --disable-mouse-mode
  fi
}
function zs() {
  if [ "$1" = "" ]; then
    echo "usage: zs <session_name>"
  else
    zellij attach "$1" options --disable-mouse-mode
    if [ "$?" -eq 1 ]; then
      zellij -s "$1" options --disable-mouse-mode
    fi
  fi
}

# mounting and unmounting other computers via sshfs
function hm() {
  if ! [ -e "$HOME/mounts" ]; then
    mkdir "$HOME/mounts"
  fi
  sshfs $1: "$HOME/mounts/$1"
}

function hu() {
  fusermount -u "$HOME/mounts/$1"
}

function hl() {
  for MOUNTPOINT in $HOME/mounts/*; do
    if [ "$(ls -A $MOUNTPOINT)" ]; then
      echo "$(basename $MOUNTPOINT)/ is loaded (or something was created there)"
    else
      echo "$(basename $MOUNTPOINT)/ is empty"
    fi
  done
}


# Mounting and unmounting phone over MTP
alias phone-mount="jmtpfs ~/usb-phone"
alias phone-unmount="fusermount -u ~/usb-phone"
function phone-list() {
  if [ "$(ls -A $HOME/usb-phone)" ]; then
    echo "usb-phone/ is loaded (or something was created there)"
  else
    echo "usb-phone/ is empty"
  fi
}

# Ranger
function f() { ranger "$1" --choosedir="$HOME"/.rangerdir; cd "$(cat $HOME/.rangerdir)"; }

# Neovim
alias n='nvim'
alias nc='nvim $HOME/.config/nvim/init.lua'
alias nco='nvim $HOME/.config/nvim/lua/user/options.lua'

# SSH
alias s='echo "SSH_AGENT_PID: $SSH_AGENT_PID"; l $HOME/.ssh'
alias sa='[[ "$SSH_AGENT_PID" = "" ]] && eval $(ssh-agent)'
alias sag='sa && ssh-add $HOME/.ssh/github'

# gcloud
GCLOUD_IMAGE="gcr.io/google.com/cloudsdktool/google-cloud-cli:latest"
alias gcloud-pull='docker pull $GCLOUD_IMAGE'
alias gcloud-version='docker run --rm $GCLOUD_IMAGE gcloud version'
alias gcloud-auth='docker run -ti --name gcloud-config $GCLOUD_IMAGE gcloud auth login'
alias gcloud='docker run -it --rm --volumes-from gcloud-config $GCLOUD_IMAGE bash'

# docker
function db() {
  if [ "$1" = "" ]; then
    echo "usage: db <docker_image_name> [Dockerfile]"
    echo "db = Docker Build"
    return
  fi

  if [ "$2" = "" ]; then
    docker build -t "$1" .
  else
    docker build -f "$2" -t "$1" .
  fi
}

function dr() {
  if [ "$2" = "" ]; then
    echo "usage: dr <docker_image_name> <pwd target> [options] [cmd]"
    echo "dr = Docker Run"
    return
  fi
  docker run $3 --mount type=bind,src="$(pwd)",target="$2" "$1" $4
}

function drp() {
  if [ "$3" = "" ]; then
    echo "usage: dr <docker_image_name> <pwd target> <port> [options] [cmd]"
    echo "dr = Docker Run Port"
    return
  fi
  dr "$1" "$2" "-p $3:$3 $4" "$5"
}

function drb() {
  if [ "$2" = "" ]; then
    echo "usage: drb <docker_image_name> <pwd target> [options]"
    echo "drb = Docker Run Bash"
    return
  fi
  dr "$1" "$2" "-it $3" bash
}

function deb() {
  if [ "$1" = "" ]; then
    echo "usage: deb <docker_container_name>"
    echo "deb = Docker Exec Bash"
    return
  fi
  docker exec -it $1 bash
}

alias ds='docker ps'
alias dc='docker compose'
alias dcs='docker compose ls'
alias dcu='docker compose up'
alias dcud='docker compose up -d'
alias dcd='docker compose down'
alias dcr='dcd && dcud'

###############################
# Commands - Utils shortcuts
###############################

alias grep='grep -i --color=auto'
alias e='echo'
alias ls='ls --color=auto --group-directories-first'
alias lsa='ls -a'
alias l='ls -lh --group-directories-first'
alias la='ls -lAh --group-directories-first'
alias lt='tree -C'
alias lta='tree -C -a -I "*.git/"'
alias ltaa='tree -C -a'

###############################
# Commands - Output parsing
###############################

#
# Output clearing
#

alias z='clear'
alias x='reset'

#
# Output copy & pasting
#

if [ "$(uname)" = "Darwin" ]; then
  alias y='pbcopy'
  alias p='pbpaste'
else
  alias y='echo not implemented'
  alias p='echo not implemented'
fi

#
# Padding
#

function pad { printf "%${1}s" "$2"; }
function padl { printf "%-${1}s" "$2"; }

#
# Extracting
#

function word { awk "{print \$$1}"; }
alias wd="word"
alias h='head'
alias hn='head -n'
alias h1='head -n 1'
alias t='tail'
alias tn="tail -n"
alias t1='tail -n 1'
function tw() { tn "$1" | wd "$2"; }
function hw() { hn "$1" | wd "$2"; }
function th() { tn "$1" | hn "$2"; }
function thw() { tn "$1" | hn "$2" | wd "$3"; }

#
# Replacing
#

function r() { sed "s/$1/$2/g;"; }
function rc() { cmd=""; for str in "$@"; do cmd="${cmd}s/$str//g;"; done; sed "$cmd"; }
function rn() {
  if [ "${1:0:1}" = "-" ]; then
    th "$1" 1
  else
    th "+$1" 1
  fi
}

###############################
# Commands - Git
###############################

# git status/branches/graphs/tree
# todo: clean git tree, remove origins and all other merged branches
alias gst='git status -sb'
function g_remote_branch_info {
  if [ "$1" = "origin/master" ] || [ "$1" = "origin/main" ] || [ "$1" = "origin/HEAD" ] || [ "$1" = "->" ] ; then
    echo "core"
  else
    echo "extra"
  fi
}
alias gg='git graph1'
alias gbr='git branch -a --sort=-committerdate --format="%(color: red)%(committerdate:short) %(color: cyan)%(refname:short)"'
alias gbrc='gbr --merged master --no-contains master | wd 2 | xargs git branch -r -d'

alias gco='git checkout'

# git fetch
function gf() {
  git checkout master
  git pull
  gbrc
}

# git pull, add, diff, commit, push, merge, rebase
alias gl='git pull'
alias ga='git add'
function gan() { ga $(gst | thw +$(($1+1)) 1 2); }
alias gr='git restore'
alias grs='git restore --staged'
alias gd='git diff'
alias gdc='git diff --cached'
alias gc='git commit -m'
alias gca='git commit --amend'
alias gu='git push'

function loc() { fn "*.$1" | xargs wc -l; } 
function locin() { fni "$1" "*.$2" | xargs wc -l; } 
function loci() { find . -path "*node_modules*" -prune -o -path "*build/*" -prune -o -path "*test-results/*" -prune -o -name "*.$1" -print | xargs wc -l; }
function locini() { find "$1" -path "*node_modules*" -prune -o -path "*build/*" -prune -o -path "*test-results/*" -prune -o -name "*.$2" -print | xargs wc -l; }


# cover: HR bullshit   : workday 
# cover: agile shit    : jira, confluence
# cover: dev tools     : postman
# cover: ci            : bitbucket, bitrise, sentry, appcenter, fastlane, jenkins
# cover: communication : outlook, slack, teams

# NVIM as IDE  (below are some things to add/consider to NVIM and/or terminal)
#   - yank to pbcopy, J and K for faster navigation,
#     jq interactive, grep interactive, regex interactive (how to regex),
#     live/repl sed on last output,...
#
# ranger config (LOC instead of KiB for text/source code)
#
#
# todo: autocompletions for my own functions (e.g. docker)

# automatic source .bashrc when using ssh shell
# add note to prompt that the .bashrc config was changed and not pushed,
#  so that no bash updates are accidentaly left not synced with another machine
#
# list, attach and steal shells from/on all other devices (ssh)
